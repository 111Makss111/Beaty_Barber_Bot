// handlers/clientPortfolioHandler.js

const { Markup } = require("telegraf");
const { getTranslation } = require("../data/translations");
const { getPortfolioPhotos, findUser } = require("../data/data");
const { getClientMainMenuKeyboard } = require("../keyboard/mainMenu"); // –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ, —è–∫–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç—å—Å—è
const clientPortfolioStates = {};

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤.
 * @param {object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf.
 */
const showClientPortfolio = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);
  const lang = user ? user.lang : "ua"; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

  const photos = getPortfolioPhotos();
  clientPortfolioStates[userId] = clientPortfolioStates[userId] || {
    currentIndex: 0,
  };
  let currentPhotoIndex = clientPortfolioStates[userId].currentIndex;

  // –Ø–∫—â–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –Ω–µ–º–∞—î –≤ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
  if (photos.length === 0) {
    await ctx.reply(
      getTranslation("client_portfolio_no_photos", lang),
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            getTranslation("client_portfolio_back_button", lang),
            "back_to_main_menu_from_client_portfolio"
          ),
        ],
      ])
    );
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± currentIndex –±—É–≤ —É –º–µ–∂–∞—Ö –º–∞—Å–∏–≤—É
  if (currentPhotoIndex >= photos.length) {
    currentPhotoIndex = 0;
    clientPortfolioStates[userId].currentIndex = 0;
  }
  if (currentPhotoIndex < 0) {
    currentPhotoIndex = photos.length - 1;
    clientPortfolioStates[userId].currentIndex = photos.length - 1;
  }

  const currentPhoto = photos[currentPhotoIndex];
  const caption = getTranslation("client_portfolio_photo_caption", lang, {
    current: currentPhotoIndex + 1,
    total: photos.length,
  });

  const navigationButtons = [];
  if (photos.length > 1) {
    navigationButtons.push(
      Markup.button.callback("‚óÄÔ∏è", "client_portfolio_prev")
    );
  }
  // –ö–Ω–æ–ø–∫–∞-–ª—ñ—á–∏–ª—å–Ω–∏–∫, —â–æ –Ω–µ —Ä–æ–±–∏—Ç—å –Ω—ñ—á–æ–≥–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
  navigationButtons.push(
    Markup.button.callback(
      `üì∑ ${currentPhotoIndex + 1}/${photos.length} üì∑`,
      "ignore_client_portfolio_count"
    )
  );
  if (photos.length > 1) {
    navigationButtons.push(
      Markup.button.callback("‚ñ∂Ô∏è", "client_portfolio_next")
    );
  }

  const backButton = [
    Markup.button.callback(
      getTranslation("client_portfolio_back_button", lang),
      "back_to_main_menu_from_client_portfolio"
    ),
  ];

  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤ –¥–ª—è Markup.inlineKeyboard
  const allButtons = [navigationButtons, backButton];

  try {
    await ctx.replyWithPhoto(currentPhoto.fileId, {
      caption: caption,
      reply_markup: Markup.inlineKeyboard(allButtons).reply_markup,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:", error);
    await ctx.reply(
      getTranslation("image_load_error", lang) ||
        "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.", //Fallback
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            getTranslation("client_portfolio_back_button", lang),
            "back_to_main_menu_from_client_portfolio"
          ),
        ],
      ])
    );
  }
};

/**
 * –û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫-–∑–∞–ø–∏—Ç–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ (–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è, –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è).
 * @param {object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf.
 */
const handleClientPortfolioCallback = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);
  const callbackData = ctx.callbackQuery.data;

  await ctx.answerCbQuery(); // –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callbackQuery

  const lang = user ? user.lang : "ua";
  const photos = getPortfolioPhotos();
  clientPortfolioStates[userId] = clientPortfolioStates[userId] || {
    currentIndex: 0,
  };
  let currentPhotoIndex = clientPortfolioStates[userId].currentIndex;

  switch (callbackData) {
    case "client_portfolio_next":
      if (photos.length > 0) {
        clientPortfolioStates[userId].currentIndex =
          (currentPhotoIndex + 1) % photos.length;
      }
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        const updatedPhotoIndex = clientPortfolioStates[userId].currentIndex;
        const updatedPhoto = photos[updatedPhotoIndex];
        const updatedCaption = getTranslation(
          "client_portfolio_photo_caption",
          lang,
          {
            current: updatedPhotoIndex + 1,
            total: photos.length,
          }
        );

        const navigationButtons = [];
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚óÄÔ∏è", "client_portfolio_prev")
          );
        }
        navigationButtons.push(
          Markup.button.callback(
            `üì∑ ${updatedPhotoIndex + 1}/${photos.length} üì∑`,
            "ignore_client_portfolio_count"
          )
        );
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚ñ∂Ô∏è", "client_portfolio_next")
          );
        }

        const backButton = [
          Markup.button.callback(
            getTranslation("client_portfolio_back_button", lang),
            "back_to_main_menu_from_client_portfolio"
          ),
        ];
        const allButtons = [navigationButtons, backButton];

        try {
          await ctx.editMessageMedia(
            {
              type: "photo",
              media: updatedPhoto.fileId,
              caption: updatedCaption,
            },
            { reply_markup: Markup.inlineKeyboard(allButtons).reply_markup }
          );
        } catch (e) {
          console.error(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:",
            e.message
          );
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ
          await ctx.deleteMessage(); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å
          await showClientPortfolio(ctx);
        }
      } else {
        await ctx.deleteMessage(); // –Ø–∫—â–æ –Ω–µ–º–∞—î message_id, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ
        await showClientPortfolio(ctx);
      }
      break;

    case "client_portfolio_prev":
      if (photos.length > 0) {
        clientPortfolioStates[userId].currentIndex =
          (currentPhotoIndex - 1 + photos.length) % photos.length;
      }
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        const updatedPhotoIndex = clientPortfolioStates[userId].currentIndex;
        const updatedPhoto = photos[updatedPhotoIndex];
        const updatedCaption = getTranslation(
          "client_portfolio_photo_caption",
          lang,
          {
            current: updatedPhotoIndex + 1,
            total: photos.length,
          }
        );

        const navigationButtons = [];
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚óÄÔ∏è", "client_portfolio_prev")
          );
        }
        navigationButtons.push(
          Markup.button.callback(
            `üì∑ ${updatedPhotoIndex + 1}/${photos.length} üì∑`,
            "ignore_client_portfolio_count"
          )
        );
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚ñ∂Ô∏è", "client_portfolio_next")
          );
        }

        const backButton = [
          Markup.button.callback(
            getTranslation("client_portfolio_back_button", lang),
            "back_to_main_menu_from_client_portfolio"
          ),
        ];
        const allButtons = [navigationButtons, backButton];

        try {
          await ctx.editMessageMedia(
            {
              type: "photo",
              media: updatedPhoto.fileId,
              caption: updatedCaption,
            },
            { reply_markup: Markup.inlineKeyboard(allButtons).reply_markup }
          );
        } catch (e) {
          console.error(
            "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:",
            e.message
          );
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ
          await ctx.deleteMessage(); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î, –±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å
          await showClientPortfolio(ctx);
        }
      } else {
        await ctx.deleteMessage(); // –Ø–∫—â–æ –Ω–µ–º–∞—î message_id, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ
        await showClientPortfolio(ctx);
      }
      break;

    case "back_to_main_menu_from_client_portfolio":
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        try {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        } catch (e) {
          console.warn(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –∑ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:",
            e.message
          );
        }
      }
      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞
      await ctx.reply(
        getTranslation("welcome_back", lang), // –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ.
        // –ü—Ä–∏–º—ñ—Ç–∫–∞: getTranslation("welcome_back", lang) –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —É translations.js
        getClientMainMenuKeyboard(lang)
      );
      delete clientPortfolioStates[userId]; // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
      break;

    case "ignore_client_portfolio_count":
      // –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, —Ü–µ –∫–Ω–æ–ø–∫–∞-–ª—ñ—á–∏–ª—å–Ω–∏–∫
      break;
  }
};

module.exports = {
  showClientPortfolio,
  handleClientPortfolioCallback,
};
