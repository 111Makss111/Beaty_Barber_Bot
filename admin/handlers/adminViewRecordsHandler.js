// admin/handlers/adminViewRecordsHandler.js

const { Markup } = require("telegraf");
const { getSchedule, findUser } = require("../../data/data");
const { getTranslation } = require("../../data/translations");
const { getAdminMenuKeyboard } = require("../keyboard/adminMenu");

/**
 * –ü–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω—É –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—ñ–≤.
 * @param {Object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf.
 */
const showRecordsPeriodSelection = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        getTranslation("records_today", lang),
        "admin_records_period_today"
      ),
      Markup.button.callback(
        getTranslation("records_tomorrow", lang),
        "admin_records_period_tomorrow"
      ),
    ],
    [
      Markup.button.callback(
        getTranslation("records_week", lang),
        "admin_records_period_week"
      ),
      Markup.button.callback(
        getTranslation("records_month", lang),
        "admin_records_period_month"
      ),
    ],
    [
      Markup.button.callback(
        getTranslation("records_all_time", lang),
        "admin_records_period_all"
      ),
    ],
    [
      Markup.button.callback(
        getTranslation("button_back_to_admin_menu", lang),
        "back_to_admin_menu_from_records_selection"
      ),
    ],
  ]);

  await ctx.reply(
    getTranslation("admin_select_records_period", lang),
    keyboard
  );
};

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞, –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º.
 * @param {Object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf.
 * @param {string} period - –ü–µ—Ä—ñ–æ–¥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó ('today', 'tomorrow', 'week', 'month', 'all').
 */
const viewFilteredRecords = async (ctx, period) => {
  const userId = ctx.from.id;
  const user = findUser(userId);

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;
  const schedule = getSchedule();
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  let recordsText = `${getTranslation(
    "admin_all_records_header",
    lang
  )}\n${getTranslation("profile_booking_separator", lang)}\n\n`;

  const activeBookings = [];

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  let endDate = new Date(now);
  if (period === "today") {
    endDate.setHours(23, 59, 59, 999);
  } else if (period === "tomorrow") {
    endDate.setDate(now.getDate() + 1);
    endDate.setHours(23, 59, 59, 999);
  } else if (period === "week") {
    endDate.setDate(now.getDate() + 7);
    endDate.setHours(23, 59, 59, 999);
  } else if (period === "month") {
    endDate.setMonth(now.getMonth() + 1);
    endDate.setHours(23, 59, 59, 999);
  }
  // –î–ª—è 'all' endDate –Ω–µ –æ–±–º–µ–∂—É—î—Ç—å—Å—è

  for (const dateString in schedule) {
    const bookingDate = new Date(dateString);
    bookingDate.setHours(0, 0, 0, 0); // –û–±–Ω—É–ª—è—î–º–æ —á–∞—Å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ª–∏—à–µ –¥–∞—Ç

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º
    if (period !== "all" && bookingDate > endDate) {
      continue;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–∏–Ω—É–ª—ñ –¥–Ω—ñ (–¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤, –∫—Ä—ñ–º 'all' –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó)
    // –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–∏ –∑–∞–≤–∂–¥–∏ —Ö–æ—á–µ–º–æ –±–∞—á–∏—Ç–∏ –ª–∏—à–µ –º–∞–π–±—É—Ç–Ω—ñ/–ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Å–∏, —Ç–æ–º—É —Ü—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è
    if (bookingDate < today) {
      continue;
    }

    const daySchedule = schedule[dateString];
    for (const time in daySchedule) {
      const booking = daySchedule[time];
      if (booking.status === "booked") {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Å –Ω–µ —î –º–∏–Ω—É–ª–∏–º –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
        if (bookingDate.toDateString() === today.toDateString()) {
          const [hours, minutes] = time.split(":").map(Number);
          const bookingDateTime = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate(),
            hours,
            minutes
          );
          if (bookingDateTime <= now) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–∏–Ω—É–ª—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
          }
        }

        const client = findUser(booking.userId);
        activeBookings.push({
          date: dateString,
          time: time,
          service: booking.service,
          clientName: client
            ? `${client.first_name || ""} ${client.last_name || ""}`.trim()
            : "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç",
          clientPhone: client ? client.phone || "–ù–µ –Ω–∞–¥–∞–Ω–æ" : "–ù–µ–≤—ñ–¥–æ–º–∏–π",
        });
      }
    }
  }

  if (activeBookings.length > 0) {
    activeBookings.sort((a, b) => {
      const dateA = new Date(`${a.date}T${a.time}`);
      const dateB = new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });

    let currentDate = "";
    for (const booking of activeBookings) {
      if (booking.date !== currentDate) {
        recordsText += `*üìÖ ${getTranslation("admin_records_date", lang, {
          date: booking.date,
        })}*\n`;
        recordsText += `${getTranslation("profile_booking_separator", lang)}\n`;
        currentDate = booking.date;
      }

      const serviceName = getTranslation(booking.service, lang);
      recordsText += `*‚è∞ ${booking.time}* - *${serviceName}*\n`;
      recordsText += `  ${getTranslation("admin_record_client_name", lang, {
        client_name: booking.clientName,
      })}\n`;
      recordsText += `  ${getTranslation("admin_record_client_phone", lang, {
        client_phone: booking.clientPhone,
      })}\n\n`;
    }
    recordsText += `${getTranslation("profile_booking_separator", lang)}\n`;
  } else {
    recordsText += `${getTranslation("admin_no_active_records", lang)}\n`;
    recordsText += `${getTranslation("profile_booking_separator", lang)}\n`;
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –∞–¥–º—ñ–Ω –º—ñ–≥ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –∞–±–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
  await ctx.reply(recordsText, {
    parse_mode: "Markdown",
    reply_markup: Markup.inlineKeyboard([
      [
        Markup.button.callback(
          getTranslation("button_back_to_records_selection", lang),
          "admin_back_to_records_selection"
        ),
      ],
      [
        Markup.button.callback(
          getTranslation("button_back_to_admin_menu", lang),
          "back_to_admin_menu_from_records"
        ),
      ],
    ]).reply_markup,
  });
};

const handleAdminRecordsCallback = async (ctx) => {
  const userId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;
  const user = findUser(userId);

  await ctx.answerCbQuery();

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;

  if (callbackData.startsWith("admin_records_period_")) {
    const period = callbackData.split("_")[3]; // –û—Ç—Ä–∏–º—É—î–º–æ 'today', 'tomorrow' —Ç–æ—â–æ
    await ctx.editMessageReplyMarkup({}); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
    await viewFilteredRecords(ctx, period); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º
  } else if (callbackData === "admin_back_to_records_selection") {
    try {
      await ctx.editMessageReplyMarkup({}); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∫–Ω–æ–ø–∫–∏
    } catch (error) {
      /* ignore */
    }
    await showRecordsPeriodSelection(ctx); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É
  } else if (
    callbackData === "back_to_admin_menu_from_records" ||
    callbackData === "back_to_admin_menu_from_records_selection"
  ) {
    try {
      await ctx.editMessageReplyMarkup({});
    } catch (error) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
    }
    await ctx.reply(
      getTranslation("admin_welcome", lang),
      getAdminMenuKeyboard(lang)
    );
  }
};

module.exports = {
  showRecordsPeriodSelection, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
  handleAdminRecordsCallback,
};
