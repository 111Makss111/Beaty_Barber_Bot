const { Markup } = require("telegraf");
const { getTranslation } = require("../../data/translations");
const { getSchedule, updateSchedule } = require("../../data/data");
const { userStates } = require("../../handlers/userPhone"); // –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö

/**
 * –ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è (–∑ 9:00 –¥–æ 18:00 –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 —Ö–≤).
 * @returns {string[]} –ú–∞—Å–∏–≤ —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ "HH:MM".
 */
const generateAllTimeSlots = () => {
  const slots = [];
  for (let h = 9; h <= 18; h++) {
    for (let m = 0; m < 60; m += 30) {
      if (h === 18 && m > 0) continue; // –í–∏–∫–ª—é—á–∞—î–º–æ 18:30
      slots.push(`${String(h).padStart(2, "0")}:${String(m).padStart(2, "0")}`);
    }
  }
  return slots;
};

/**
 * –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —á–∞—Å–æ–≤–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –∞–¥–º—ñ–Ω-–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.
 * –ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç—ñ–≤ (–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ, –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω–æ–º).
 * @param {string} dateString - –î–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'YYYY-MM-DD'.
 * @param {string} lang - –ú–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @returns {Object} –Ü–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Telegraf.
 */
const getAdminTimeSlotsKeyboard = (dateString, lang) => {
  const schedule = getSchedule();
  const daySchedule = schedule[dateString] || {};
  const allPossibleSlots = generateAllTimeSlots();

  const buttons = [];
  const now = new Date();
  const todayString = now.toISOString().slice(0, 10);

  // –î–æ–¥–∞—î–º–æ —Å–ª–æ—Ç–∏ —É –∫–Ω–æ–ø–∫–∏
  for (const slot of allPossibleSlots) {
    const [hours, minutes] = slot.split(":").map(Number);
    const slotDateTime = new Date(dateString);
    slotDateTime.setHours(hours, minutes, 0, 0);

    let buttonText = slot;
    let callbackData = `admin_toggle_hour_${dateString}_${slot}`; // –ö–æ–ª–±–µ–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∏

    const slotInfo = daySchedule[slot];
    if (slotInfo) {
      if (slotInfo.status === "booked") {
        // –Ø–∫—â–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º, —Ç–æ —Ü–µ–π —Å–ª–æ—Ç –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏, –∞–ª–µ –º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏
        buttonText = `${slot} üßë`; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –∑–∞–π–Ω—è—Ç–∏–π –∫–ª—ñ—î–Ω—Ç–æ–º
        callbackData = "ignore_slot_booked"; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
      } else if (slotInfo.status === "blocked_admin") {
        buttonText = `${slot} ‚ùå`; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–¥–º—ñ–Ω–æ–º
      }
    }

    // –Ø–∫—â–æ —Å–ª–æ—Ç —É –º–∏–Ω—É–ª–æ–º—É, –π–æ–≥–æ —Ç–µ–∂ –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
    if (
      (dateString === todayString && slotDateTime < now) || // –°—å–æ–≥–æ–¥–Ω—ñ —ñ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤
      new Date(dateString) < new Date(todayString) // –î–µ–Ω—å –≤ –º–∏–Ω—É–ª–æ–º—É
    ) {
      buttonText = `${slot} ‚åõ`; // –ú–∏–Ω—É–ª–∏–π —á–∞—Å
      callbackData = "ignore_past_slot";
    }

    buttons.push(Markup.button.callback(buttonText, callbackData));
  }

  // –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∏ –ø–æ 4
  const rows = [];
  for (let i = 0; i < buttons.length; i += 4) {
    rows.push(buttons.slice(i, i + 4));
  }

  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" —Ç–∞ "–ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
  rows.push([
    Markup.button.callback(
      getTranslation("button_finish_blocking_hours", lang),
      `admin_finish_hour_blocking_${dateString}`
    ),
    Markup.button.callback(
      getTranslation("button_back_to_calendar", lang), // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–ª—é—á
      `admin_back_to_calendar_from_hours_${dateString}`
    ),
  ]);

  return Markup.inlineKeyboard(rows);
};

/**
 * –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥–æ–¥–∏–Ω–∏ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º.
 * @param {Object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf.
 */
const handleAdminTimeSlotCallback = async (ctx) => {
  const userId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;
  const user = userStates[userId]; // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

  await ctx.answerCbQuery();

  if (!user || user.state !== "admin_waiting_for_hour_to_block") {
    await ctx.reply(getTranslation("access_denied", user ? user.lang : "ua"));
    return;
  }

  const lang = user.lang;
  const currentSelectedDate = user.current_admin_date; // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑ userStates

  if (!currentSelectedDate) {
    await ctx.reply(getTranslation("error_try_again", lang));
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —Å–ª–æ—Ç –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  if (callbackData.startsWith("admin_toggle_hour_")) {
    const parts = callbackData.split("_");
    const dateString = parts[3]; // 'YYYY-MM-DD'
    const timeSlot = parts[4]; // 'HH:MM'

    if (dateString !== currentSelectedDate) {
      console.warn(
        `Admin tried to toggle hour on wrong date. Expected: ${currentSelectedDate}, Got: ${dateString}`
      );
      await ctx.reply(getTranslation("error_try_again", lang));
      return;
    }

    const schedule = getSchedule();
    schedule[dateString] = schedule[dateString] || {};
    const daySchedule = schedule[dateString];

    let messageText = "";

    if (
      daySchedule[timeSlot] &&
      daySchedule[timeSlot].status === "blocked_admin"
    ) {
      // –°–ª–æ—Ç –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–¥–º—ñ–Ω–æ–º, —Ä–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ
      delete daySchedule[timeSlot];
      messageText = getTranslation("admin_hour_unblocked", lang, {
        date: dateString,
        time: timeSlot,
      });
    } else if (
      daySchedule[timeSlot] &&
      daySchedule[timeSlot].status === "booked"
    ) {
      // –°–ª–æ—Ç –∑–∞–π–Ω—è—Ç–∏–π –∫–ª—ñ—î–Ω—Ç–æ–º, –Ω–µ –º–æ–∂–µ–º–æ –±–ª–æ–∫—É–≤–∞—Ç–∏
      messageText = getTranslation("slot_not_available", lang);
    } else {
      // –°–ª–æ—Ç –≤—ñ–ª—å–Ω–∏–π, –±–ª–æ–∫—É—î–º–æ
      daySchedule[timeSlot] = {
        status: "blocked_admin",
        timestamp: new Date().toISOString(),
        blockedBy: userId,
      };
      messageText = getTranslation("admin_hour_blocked", lang, {
        date: dateString,
        time: timeSlot,
      });
    }

    updateSchedule(schedule);

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–º—ñ–Ω–∏
    try {
      await ctx.editMessageReplyMarkup(
        getAdminTimeSlotsKeyboard(dateString, lang).reply_markup
      );
      await ctx.answerCbQuery(messageText, { show_alert: true }); // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    } catch (error) {
      console.error("Error editing time slots keyboard for admin:", error);
      await ctx.reply(messageText); // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    }
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
  if (callbackData.startsWith("admin_finish_hour_blocking_")) {
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω –∞–¥–º—ñ–Ω–∞ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    delete userStates[userId];
    const userFound = require("../../data/data").findUser(userId); // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π findUser –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (userFound) {
      userFound.state = null;
      require("../../data/data").saveUser(userFound);
    }

    try {
      await ctx.editMessageReplyMarkup({}); // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
      await ctx.reply(
        getTranslation("choose_action", lang), // –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ choose_action –∞–±–æ —ñ–Ω—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ
        require("../keyboard/adminMenu").getAdminMenuKeyboard(lang) // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
      );
    } catch (error) {
      console.error("Error finishing hour blocking:", error);
      await ctx.reply(getTranslation("error_try_again", lang));
    }
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
  if (callbackData.startsWith("admin_back_to_calendar_from_hours_")) {
    const now = new Date();
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≥–æ–¥–∏–Ω
    userStates[userId] = {
      state: "admin_waiting_for_date_for_time_block", // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      lang: lang,
    };
    // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ user –≤ data.js, —â–æ–± —Å—Ç–∞–Ω –∑–±–µ—Ä—ñ–≥–∞–≤—Å—è
    const userFound = require("../../data/data").findUser(userId);
    if (userFound) {
      userFound.state = "admin_waiting_for_date_for_time_block";
      require("../../data/data").saveUser(userFound);
    }

    try {
      await ctx.editMessageReplyMarkup(
        // –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        require("../../keyboard/calendar").getCalendarInlineKeyboard(
          now.getFullYear(),
          now.getMonth(),
          lang,
          true // true –¥–ª—è –∞–¥–º—ñ–Ω-—Ä–µ–∂–∏–º—É
        ).reply_markup
      );
      await ctx.editMessageText(
        getTranslation("admin_choose_date_for_hours_block", lang)
      ); // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç
    } catch (error) {
      console.error("Error going back to admin calendar from hours:", error);
      await ctx.reply(
        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
        getTranslation("admin_choose_date_for_hours_block", lang),
        require("../../keyboard/calendar").getCalendarInlineKeyboard(
          now.getFullYear(),
          now.getMonth(),
          lang,
          true
        )
      );
    }
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤
  if (
    callbackData === "ignore_slot_booked" ||
    callbackData === "ignore_past_slot"
  ) {
    await ctx.answerCbQuery(getTranslation("slot_not_available", lang), {
      show_alert: true,
    });
    return;
  }

  await ctx.reply(getTranslation("error_try_again", lang));
};

module.exports = {
  getAdminTimeSlotsKeyboard,
  handleAdminTimeSlotCallback,
};
