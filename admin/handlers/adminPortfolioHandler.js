const { Markup } = require("telegraf");
const { getTranslation } = require("../../data/translations");
const { getAdminMenuKeyboard } = require("../keyboard/adminMenu");
const {
  findUser,
  getPortfolioPhotos,
  addPortfolioPhoto,
  deletePortfolioPhoto,
} = require("../../data/data");
const { userStates } = require("../../handlers/userPhone"); // –í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—å, —â–æ userStates —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑–≤—ñ–¥—Ç–∏, –¥–µ –≤—ñ–Ω –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞: –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ, —è–∫–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç—å—Å—è
const adminPortfolioStates = {};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
const showPortfolioMenu = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;
  const photos = getPortfolioPhotos();
  adminPortfolioStates[userId] = adminPortfolioStates[userId] || {
    currentIndex: 0,
  };
  let currentPhotoIndex = adminPortfolioStates[userId].currentIndex;

  if (photos.length === 0) {
    // –Ø–∫—â–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ" —Ç–∞ "–ù–∞–∑–∞–¥"
    await ctx.reply(
      getTranslation("admin_portfolio_no_photos", lang),
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            getTranslation("admin_portfolio_add_photo_button", lang),
            "admin_portfolio_add"
          ),
        ],
        [
          Markup.button.callback(
            getTranslation("button_back_to_admin_menu", lang),
            "back_to_admin_menu_from_portfolio"
          ),
        ],
      ]) // –¢—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ .reply_markup, –±–æ ctx.reply() —Å–∞–º —Ü–µ –∑—Ä–æ–∑—É–º—ñ—î
    );
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± currentIndex –±—É–≤ —É –º–µ–∂–∞—Ö –º–∞—Å–∏–≤—É
  if (currentPhotoIndex >= photos.length) {
    currentPhotoIndex = 0;
    adminPortfolioStates[userId].currentIndex = 0;
  }
  if (currentPhotoIndex < 0) {
    currentPhotoIndex = photos.length - 1;
    adminPortfolioStates[userId].currentIndex = photos.length - 1;
  }

  const currentPhoto = photos[currentPhotoIndex];
  const caption = getTranslation("admin_portfolio_photo_caption", lang, {
    current: currentPhotoIndex + 1,
    total: photos.length,
  });

  const navigationButtons = [];
  if (photos.length > 1) {
    navigationButtons.push(
      Markup.button.callback("‚óÄÔ∏è", "admin_portfolio_prev")
    );
  }
  navigationButtons.push(
    Markup.button.callback(
      `üì∑ ${currentPhotoIndex + 1}/${photos.length} üì∑`,
      "ignore_portfolio_count"
    )
  );
  if (photos.length > 1) {
    navigationButtons.push(
      Markup.button.callback("‚ñ∂Ô∏è", "admin_portfolio_next")
    );
  }

  const actionButtons = [
    Markup.button.callback(
      getTranslation("admin_portfolio_add_photo_button", lang),
      "admin_portfolio_add"
    ),
    Markup.button.callback(
      getTranslation("admin_portfolio_delete_photo_button", lang),
      `admin_portfolio_delete_${currentPhotoIndex}`
    ),
  ];

  const backButton = [
    Markup.button.callback(
      getTranslation("button_back_to_admin_menu", lang),
      "back_to_admin_menu_from_portfolio"
    ),
  ];

  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤ –¥–ª—è Markup.inlineKeyboard
  const allButtons = [navigationButtons, actionButtons, backButton];

  try {
    await ctx.replyWithPhoto(currentPhoto.fileId, {
      caption: caption,
      reply_markup: Markup.inlineKeyboard(allButtons).reply_markup, // –¢—É—Ç .reply_markup –ø–æ—Ç—Ä—ñ–±–µ–Ω
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:", error);
    await ctx.reply(
      getTranslation("image_load_error", lang) ||
        "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            getTranslation("admin_portfolio_add_photo_button", lang),
            "admin_portfolio_add"
          ),
        ],
        [
          Markup.button.callback(
            getTranslation("button_back_to_admin_menu", lang),
            "back_to_admin_menu_from_portfolio"
          ),
        ],
      ])
    );
  }
};

// –û–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
const handlePortfolioCallback = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);
  const callbackData = ctx.callbackQuery.data;

  await ctx.answerCbQuery(); // –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callbackQuery

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;
  const photos = getPortfolioPhotos();
  adminPortfolioStates[userId] = adminPortfolioStates[userId] || {
    currentIndex: 0,
  };
  let currentPhotoIndex = adminPortfolioStates[userId].currentIndex;

  switch (callbackData) {
    case "admin_portfolio_add":
      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        try {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        } catch (e) {
          console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e.message);
        }
      }
      await ctx.reply(
        getTranslation("admin_portfolio_send_photo_instruction", lang),
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              getTranslation("button_back_to_admin_menu", lang),
              "back_to_admin_menu_from_portfolio"
            ),
          ],
        ])
      );
      userStates[userId] = { state: "admin_waiting_for_portfolio_photo" };
      break;

    case "admin_portfolio_next":
      if (photos.length > 0) {
        adminPortfolioStates[userId].currentIndex =
          (currentPhotoIndex + 1) % photos.length;
      }
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        const updatedPhotoIndex = adminPortfolioStates[userId].currentIndex;
        const updatedPhoto = photos[updatedPhotoIndex];
        const updatedCaption = getTranslation(
          "admin_portfolio_photo_caption",
          lang,
          {
            current: updatedPhotoIndex + 1,
            total: photos.length,
          }
        );

        const navigationButtons = [];
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚óÄÔ∏è", "admin_portfolio_prev")
          );
        }
        navigationButtons.push(
          Markup.button.callback(
            `üì∑ ${updatedPhotoIndex + 1}/${photos.length} üì∑`,
            "ignore_portfolio_count"
          )
        );
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚ñ∂Ô∏è", "admin_portfolio_next")
          );
        }

        const actionButtons = [
          Markup.button.callback(
            getTranslation("admin_portfolio_add_photo_button", lang),
            "admin_portfolio_add"
          ),
          Markup.button.callback(
            getTranslation("admin_portfolio_delete_photo_button", lang),
            `admin_portfolio_delete_${updatedPhotoIndex}`
          ),
        ];

        const backButton = [
          Markup.button.callback(
            getTranslation("button_back_to_admin_menu", lang),
            "back_to_admin_menu_from_portfolio"
          ),
        ];

        const allButtons = [navigationButtons, actionButtons, backButton];

        try {
          await ctx.editMessageMedia(
            {
              type: "photo",
              media: updatedPhoto.fileId,
              caption: updatedCaption,
            },
            { reply_markup: Markup.inlineKeyboard(allButtons).reply_markup }
          );
        } catch (e) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e.message);
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ
          await ctx.deleteMessage();
          await showPortfolioMenu(ctx);
        }
      } else {
        await ctx.deleteMessage(); // –Ø–∫—â–æ –Ω–µ–º–∞—î message_id, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ
        await showPortfolioMenu(ctx);
      }
      break;

    case "admin_portfolio_prev":
      if (photos.length > 0) {
        adminPortfolioStates[userId].currentIndex =
          (currentPhotoIndex - 1 + photos.length) % photos.length;
      }
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        const updatedPhotoIndex = adminPortfolioStates[userId].currentIndex;
        const updatedPhoto = photos[updatedPhotoIndex];
        const updatedCaption = getTranslation(
          "admin_portfolio_photo_caption",
          lang,
          {
            current: updatedPhotoIndex + 1,
            total: photos.length,
          }
        );

        const navigationButtons = [];
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚óÄÔ∏è", "admin_portfolio_prev")
          );
        }
        navigationButtons.push(
          Markup.button.callback(
            `üì∑ ${updatedPhotoIndex + 1}/${photos.length} üì∑`,
            "ignore_portfolio_count"
          )
        );
        if (photos.length > 1) {
          navigationButtons.push(
            Markup.button.callback("‚ñ∂Ô∏è", "admin_portfolio_next")
          );
        }

        const actionButtons = [
          Markup.button.callback(
            getTranslation("admin_portfolio_add_photo_button", lang),
            "admin_portfolio_add"
          ),
          Markup.button.callback(
            getTranslation("admin_portfolio_delete_photo_button", lang),
            `admin_portfolio_delete_${updatedPhotoIndex}`
          ),
        ];

        const backButton = [
          Markup.button.callback(
            getTranslation("button_back_to_admin_menu", lang),
            "back_to_admin_menu_from_portfolio"
          ),
        ];

        const allButtons = [navigationButtons, actionButtons, backButton];

        try {
          await ctx.editMessageMedia(
            {
              type: "photo",
              media: updatedPhoto.fileId,
              caption: updatedCaption,
            },
            { reply_markup: Markup.inlineKeyboard(allButtons).reply_markup }
          );
        } catch (e) {
          console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–µ–¥—ñ–∞-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e.message);
          // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏, —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ
          await ctx.deleteMessage();
          await showPortfolioMenu(ctx);
        }
      } else {
        await ctx.deleteMessage(); // –Ø–∫—â–æ –Ω–µ–º–∞—î message_id, –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ
        await showPortfolioMenu(ctx);
      }
      break;

    case "back_to_admin_menu_from_portfolio":
      if (ctx.callbackQuery.message && ctx.callbackQuery.message.message_id) {
        try {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        } catch (e) {
          console.warn(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ:",
            e.message
          );
        }
      }
      await ctx.reply(
        getTranslation("admin_welcome", lang),
        getAdminMenuKeyboard(lang)
      );
      delete adminPortfolioStates[userId];
      delete userStates[userId];
      break;

    case "ignore_portfolio_count":
      break;

    default:
      if (callbackData.startsWith("admin_portfolio_delete_")) {
        const indexToDelete = parseInt(callbackData.split("_")[3], 10);
        if (
          !isNaN(indexToDelete) &&
          indexToDelete >= 0 &&
          indexToDelete < photos.length
        ) {
          deletePortfolioPhoto(indexToDelete);

          // –Ø–∫—â–æ –≤–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Ñ–æ—Ç–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ
          if (getPortfolioPhotos().length === 0) {
            if (
              ctx.callbackQuery.message &&
              ctx.callbackQuery.message.message_id
            ) {
              try {
                await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
              } catch (e) {
                console.warn(
                  "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ñ–æ—Ç–æ:",
                  e.message
                );
              }
            }
            await ctx.reply(
              getTranslation("admin_portfolio_photo_deleted", lang)
            );
            await showPortfolioMenu(ctx); // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ
          } else {
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å, —è–∫—â–æ –≤–∏–¥–∞–ª–µ–Ω–µ —Ñ–æ—Ç–æ –±—É–ª–æ –ø–æ—Ç–æ—á–Ω–∏–º –∞–±–æ —Ä–∞–Ω—ñ—à–µ –Ω—å–æ–≥–æ
            if (
              adminPortfolioStates[userId].currentIndex >=
              getPortfolioPhotos().length
            ) {
              adminPortfolioStates[userId].currentIndex = Math.max(
                0,
                getPortfolioPhotos().length - 1
              );
            }
            await ctx.reply(
              getTranslation("admin_portfolio_photo_deleted", lang)
            );
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ
            if (
              ctx.callbackQuery.message &&
              ctx.callbackQuery.message.message_id
            ) {
              try {
                await ctx.deleteMessage(ctx.callbackQuery.message.message_id); // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î, —â–æ–± –Ω–µ –±—É–ª–æ –¥–≤–æ—Ö
              } catch (e) {
                console.warn(
                  "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ:",
                  e.message
                );
              }
            }
            await showPortfolioMenu(ctx);
          }
        } else {
          await ctx.reply(getTranslation("error_try_again", lang));
        }
      }
      break;
  }
};

// –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
const handlePortfolioPhoto = async (ctx) => {
  const userId = ctx.from.id;
  const user = findUser(userId);

  if (!user || !user.is_admin) {
    await ctx.reply(getTranslation("access_denied", "ua"));
    return;
  }

  const lang = user.lang;
  const photo = ctx.message.photo;

  if (photo && photo.length > 0) {
    const fileId = photo[photo.length - 1].file_id; // –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à—É —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ
    addPortfolioPhoto(fileId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î message_id, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é "–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ"
    if (ctx.message && ctx.message.message_id) {
      try {
        // –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, —è–∫–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ
        // –ê–ª–µ —Ü–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∏ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏
        // –ö—Ä–∞—â–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —ñ –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
        await ctx.deleteMessage(ctx.message.message_id); // –í–∏–¥–∞–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–µ —Ñ–æ—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      } catch (e) {
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–µ —Ñ–æ—Ç–æ:", e.message);
      }
    }
    await ctx.reply(getTranslation("admin_portfolio_photo_added", lang));
    delete userStates[userId];
    await showPortfolioMenu(ctx); // –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
  } else {
    await ctx.reply(getTranslation("admin_portfolio_no_photo_received", lang));
  }
};

module.exports = {
  showPortfolioMenu,
  handlePortfolioCallback,
  handlePortfolioPhoto,
};
