const { Markup } = require("telegraf");
const { getTranslation } = require("../translate");

function getTimeKeyboard(selectedDate, bookedAppointments, lang) {
  const timeSlots = [
    "09:00",
    "10:30",
    "12:00",
    "13:30",
    "15:00",
    "16:30",
    "18:00",
  ];
  const keyboard = [];
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // –ü–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å –±–µ–∑ —á–∞—Å—É

  let currentRow = [];
  for (const slot of timeSlots) {
    const [hours, minutes] = slot.split(":").map(Number);
    const slotDateTime = new Date(selectedDate); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É
    slotDateTime.setHours(hours, minutes, 0, 0);

    let buttonText = slot;
    let callbackData = `time-select-${slot}`;
    let isDisabled = false;

    // 1. –õ–æ–≥—ñ–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–ª–∏—Ö –≥–æ–¥–∏–Ω (–¥–ª—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏)
    if (
      selectedDate.toDateString() === today.toDateString() &&
      slotDateTime.getTime() < now.getTime()
    ) {
      buttonText = `üö´ ${slot}`; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –º–∏–Ω—É–ª–∏–π —á–∞—Å
      callbackData = "ignore"; // –†–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é
      isDisabled = true;
    }

    // 2. –õ–æ–≥—ñ–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏—Ö –≥–æ–¥–∏–Ω
    const isBooked = bookedAppointments.some((appointment) => {
      const apptDate = new Date(appointment.date);
      const apptTime = appointment.time;
      return (
        apptDate.toDateString() === selectedDate.toDateString() &&
        apptTime === slot
      );
    });

    if (isBooked && !isDisabled) {
      // –Ø–∫—â–æ –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ —ñ –Ω–µ —î –º–∏–Ω—É–ª–∏–º —á–∞—Å–æ–º
      buttonText = `‚ùå ${slot}`; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –∑–∞–π–Ω—è—Ç–∏–π
      callbackData = "ignore"; // –†–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é
      isDisabled = true;
    }

    currentRow.push(Markup.button.callback(buttonText, callbackData));

    if (currentRow.length === 2) {
      // –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∫—É
      keyboard.push(currentRow);
      currentRow = [];
    }
  }

  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫, —è–∫—â–æ –≤—ñ–Ω –Ω–µ–ø–æ–≤–Ω–∏–π
  if (currentRow.length > 0) {
    keyboard.push(currentRow);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
  keyboard.push([
    Markup.button.callback(
      getTranslation(lang, "back_to_calendar_btn"),
      "back_to_calendar"
    ),
  ]);

  return Markup.inlineKeyboard(keyboard);
}

module.exports = {
  getTimeKeyboard,
};
