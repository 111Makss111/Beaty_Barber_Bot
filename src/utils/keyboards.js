const { Markup } = require("telegraf");
const { getMessage } = require("./i18n");
const { AVAILABLE_TIMES } = require("./constants");

// –ù–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ (ReplyKeyboard)
const languageSelectionReplyKeyboard = () => {
  return Markup.keyboard([["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"], ["üáµüá± Polski"]]).resize();
};

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
const mainMenuKeyboard = (ctx) => {
  return Markup.keyboard([
    [
      getMessage(ctx, "bookAppointmentButton"),
      getMessage(ctx, "cancelAppointmentButton"),
    ],
    [getMessage(ctx, "myCabinetButton"), getMessage(ctx, "portfolioButton")],
  ]).resize();
};

const adminPanelKeyboard = (ctx) => {
  return Markup.keyboard([
    [getMessage(ctx, "viewAllAppointments"), getMessage(ctx, "blockDateTime")],
    [getMessage(ctx, "addPortfolioPhoto"), getMessage(ctx, "backToMainMenu")],
  ]).resize();
};

const confirmationKeyboard = (ctx) => {
  return Markup.inlineKeyboard([
    Markup.button.callback(getMessage(ctx, "confirm"), "confirm_booking"),
    Markup.button.callback(getMessage(ctx, "cancel"), "cancel_booking"),
  ]);
};

/**
 * –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —á–∞—Å–∞–º–∏.
 * @param {object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏.
 * @param {string[]} bookedTimes - –ú–∞—Å–∏–≤ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏.
 * @param {string} selectedDate - –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.
 * @returns {object} Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Telegraf.
 */
const generateTimeKeyboard = (ctx, bookedTimes = [], selectedDate) => {
  const now = new Date();
  const todayDate = `${now.getFullYear()}-${(now.getMonth() + 1)
    .toString()
    .padStart(2, "0")}-${now.getDate().toString().padStart(2, "0")}`;
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();

  const buttons = AVAILABLE_TIMES.map((time) => {
    const isBooked = bookedTimes.includes(time);

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ –¥–∞—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è, —ñ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤
    const [hour, minute] = time.split(":").map(Number);
    const isPastTimeToday =
      selectedDate === todayDate &&
      (hour < currentHour || (hour === currentHour && minute <= currentMinute));

    if (isBooked || isPastTimeToday) {
      return Markup.button.callback(`[${time}]`, "time_booked_or_past"); // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
    } else {
      return Markup.button.callback(time, `time_selected_${time}`);
    }
  });

  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"
  buttons.push(
    Markup.button.callback(
      getMessage(ctx, "backToMainMenu"),
      "back_to_calendar_from_time"
    )
  ); // –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

  return Markup.inlineKeyboard(buttons, { columns: 3 });
};

const generateServiceKeyboard = (ctx) => {
  // –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥
  const services = [
    { id: "manicure", nameKey: "manicureService" },
    { id: "pedicure", nameKey: "pedicureService" },
    { id: "removal", nameKey: "removalService" },
    { id: "strengthening", nameKey: "strengtheningService" },
  ];

  const buttons = services.map((service) =>
    Markup.button.callback(
      getMessage(ctx, service.nameKey),
      `service_${service.id}`
    )
  );

  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥"
  buttons.push(
    Markup.button.callback(
      getMessage(ctx, "backToMainMenu"),
      "back_to_main_menu_from_services"
    )
  );

  return Markup.inlineKeyboard(buttons, { columns: 2 }); // –ú–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤
};
/**
 * –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º–∞–π–±—É—Ç–Ω—ñ–º–∏ –∑–∞–ø–∏—Å–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @param {object} ctx - –û–±'—î–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Telegraf –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏.
 * @param {Array<object>} appointments - –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * @returns {object} Inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Telegraf.
 */
const generateUserAppointmentsKeyboard = (ctx, appointments) => {
  const buttons = [];

  // –Ø–∫—â–æ —î –∑–∞–ø–∏—Å–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ
  if (appointments && appointments.length > 0) {
    appointments.forEach((app) => {
      const serviceName = getMessage(ctx, `${app.service}Service`); // –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏
      buttons.push([
        Markup.button.callback(
          `‚ùå ${serviceName} ${app.date} –æ ${app.time}`,
          `cancel_appointment_id_${app.id}`
        ),
      ]);
    });
  }

  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
  buttons.push([
    Markup.button.callback(getMessage(ctx, "back"), "back_from_cancel_list"),
  ]);

  return Markup.inlineKeyboard(buttons);
};
module.exports = {
  mainMenuKeyboard,
  adminPanelKeyboard,
  confirmationKeyboard,
  generateTimeKeyboard,
  generateServiceKeyboard,
  languageSelectionReplyKeyboard, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
  generateUserAppointmentsKeyboard,
};
