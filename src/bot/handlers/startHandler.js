const {
  getMessage,
  setUserLanguage,
  getUserLanguage,
} = require("../../utils/i18n");
const {
  languageSelectionReplyKeyboard,
  mainMenuKeyboard,
} = require("../../utils/keyboards"); // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
const userService = require("../../services/userService");
const { ADMIN_ID } = require("../../utils/constants");
const { Markup } = require("telegraf");

const startHandler = async (ctx) => {
  // –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏ –ø—Ä–∏ /start –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ReplyKeyboard
  await ctx.reply(
    getMessage(ctx, "selectLanguage"),
    languageSelectionReplyKeyboard()
  );
  ctx.session.userState = "awaiting_language_selection"; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
};

// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –±—É–¥–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
const handleLanguageSelectionText = async (ctx) => {
  const messageText = ctx.message.text;
  let lang = "";

  if (messageText === "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞") {
    lang = "uk";
  } else if (messageText === "üáµüá± Polski") {
    lang = "pl";
  } else {
    // –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —â–æ—Å—å —ñ–Ω—à–µ, –ø—Ä–æ—Å–∏–º–æ –æ–±—Ä–∞—Ç–∏ –∑ –∫–Ω–æ–ø–æ–∫
    await ctx.reply(
      getMessage(ctx, "pleaseSelectLanguageFromButtons"),
      languageSelectionReplyKeyboard()
    ); // –î–æ–¥–∞–º–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ messages.js
    return; // –ó–∞–ª–∏—à–∞—î–º–æ—Å—å —É —Å—Ç–∞–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
  }

  const userId = ctx.from.id;
  let user = await userService.getUser(userId);

  if (!user) {
    user = await userService.createUser(
      userId,
      ctx.from.first_name || "",
      ctx.from.last_name || "",
      ""
    );
  }
  await userService.updateUserData(userId, { language: lang });
  setUserLanguage(ctx, lang);

  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –º–æ–≤–∏
  await ctx.reply(getMessage(ctx, "languageSet"), Markup.removeKeyboard());

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ —ñ–º'—è/–ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
  if (!user.firstName || !user.phone || user.phone === "–ü—Ä–æ–ø—É—â–µ–Ω–æ") {
    ctx.session.userState = "waiting_for_name";
    await ctx.reply(getMessage(ctx, "enterName"));
  } else {
    ctx.session.userState = "idle";
    const userName = user.firstName || ctx.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
    await ctx.reply(getMessage(ctx, "start", userName), mainMenuKeyboard(ctx));
    await ctx.reply(getMessage(ctx, "mainMenu"), mainMenuKeyboard(ctx));
  }
};

const handleUserInfoInput = async (ctx) => {
  const userId = ctx.from.id;
  let user = await userService.getUser(userId);

  if (!user) {
    user = await userService.createUser(
      userId,
      ctx.from.first_name || "",
      ctx.from.last_name || "",
      ""
    );
  }

  if (ctx.session.userState === "waiting_for_name") {
    const [firstName, ...lastNameParts] = ctx.message.text.split(" ");
    const lastName = lastNameParts.join(" ");
    await userService.updateUserData(userId, { firstName, lastName });
    ctx.session.userState = "waiting_for_phone";
    await ctx.reply(
      getMessage(ctx, "enterPhone"),
      Markup.keyboard([
        [
          getMessage(ctx, "skipPhone"),
          Markup.button.contactRequest(getMessage(ctx, "sendMyContact")),
        ],
      ]).resize()
    );
  } else if (ctx.session.userState === "waiting_for_phone") {
    let phoneNumber = "";
    if (ctx.message.contact) {
      phoneNumber = ctx.message.contact.phone_number;
    } else if (ctx.message.text === getMessage(ctx, "skipPhone")) {
      phoneNumber = "–ü—Ä–æ–ø—É—â–µ–Ω–æ";
    } else {
      phoneNumber = ctx.message.text;
    }
    await userService.updateUserData(userId, { phone: phoneNumber });

    ctx.session.userState = "idle";
    const updatedUser = await userService.getUser(userId);
    const userName =
      updatedUser.firstName || ctx.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
    await ctx.reply(getMessage(ctx, "start", userName), mainMenuKeyboard(ctx));
    await ctx.reply(getMessage(ctx, "mainMenu"), mainMenuKeyboard(ctx));
  }
};

const handleContactInput = async (ctx) => {
  const userId = ctx.from.id;
  if (ctx.session.userState === "waiting_for_phone" && ctx.message.contact) {
    await userService.updateUserData(userId, {
      phone: ctx.message.contact.phone_number,
    });
    ctx.session.userState = "idle";
    const updatedUser = await userService.getUser(userId);
    const userName =
      updatedUser.firstName || ctx.from.first_name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á";
    await ctx.reply(getMessage(ctx, "start", userName), mainMenuKeyboard(ctx));
    await ctx.reply(getMessage(ctx, "mainMenu"), mainMenuKeyboard(ctx));
  }
};

module.exports = {
  startHandler,
  handleLanguageSelectionText, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
  handleUserInfoInput,
  handleContactInput,
};
