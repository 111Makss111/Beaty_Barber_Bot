const { Markup } = require("telegraf");
const { getTranslation } = require("../data/translations");
const { getSchedule } = require("../data/data"); // –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö/–∑–∞–π–Ω—è—Ç–∏—Ö —Å–ª–æ—Ç—ñ–≤

/**
 * –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è.
 * @param {number} year - –†—ñ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
 * @param {number} month - –ú—ñ—Å—è—Ü—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (0-11).
 * @param {string} lang - –ú–æ–≤–Ω–∏–π –∫–æ–¥ ('ua' –∞–±–æ 'pl').
 * @returns {Object} Telegraf InlineKeyboardMarkup.
 */
const getCalendarInlineKeyboard = (year, month, lang) => {
  const today = new Date();
  const currentYear = today.getFullYear();
  const currentMonth = today.getMonth();
  const currentDay = today.getDate();

  const monthNames = getTranslation("month_names", lang);
  const weekdayShortNames = getTranslation("weekday_short", lang);
  const schedule = getSchedule(); // –û—Ç—Ä–∏–º—É—î–º–æ –≤–µ—Å—å —Ä–æ–∑–∫–ª–∞–¥

  const calendar = [];

  // –†—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–∞–º–∏ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
  calendar.push(
    weekdayShortNames.map((day) => Markup.button.callback(day, "ignore"))
  ); // 'ignore' –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫

  // –ü–µ—Ä—à–∏–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è
  const firstDayOfMonth = new Date(year, month, 1);
  // –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è
  const lastDayOfMonth = new Date(year, month + 1, 0);
  // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ
  const numDaysInMonth = lastDayOfMonth.getDate();
  // –î–µ–Ω—å —Ç–∏–∂–Ω—è –ø–µ—Ä—à–æ–≥–æ –¥–Ω—è –º—ñ—Å—è—Ü—è (0 - –ù–¥, 1 - –ü–Ω, ..., 6 - –°–±). –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –¥–æ 0 - –°–±, 1 - –ù–¥...
  let startDayOfWeek = (firstDayOfMonth.getDay() + 6) % 7; // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ = 0, –ù–µ–¥—ñ–ª—è = 6

  let day = 1;
  for (let i = 0; i < 6; i++) {
    // –ú–∞–∫—Å–∏–º—É–º 6 —Ç–∏–∂–Ω—ñ–≤ –≤ –º—ñ—Å—è—Ü—ñ
    const week = [];
    for (let j = 0; j < 7; j++) {
      if (i === 0 && j < startDayOfWeek) {
        // –ü—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ –ø–µ—Ä—à–æ–≥–æ –¥–Ω—è –º—ñ—Å—è—Ü—è
        week.push(Markup.button.callback(" ", "ignore"));
      } else if (day <= numDaysInMonth) {
        const date = new Date(year, month, day);
        const dateString = `${year}-${(month + 1)
          .toString()
          .padStart(2, "0")}-${day.toString().padStart(2, "0")}`;

        let buttonText = day.toString();
        let callbackData = `date_${dateString}`;
        let isDisabled = false;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É
        if (
          year < currentYear ||
          (year === currentYear && month < currentMonth) ||
          (year === currentYear && month === currentMonth && day < currentDay)
        ) {
          isDisabled = true;
          buttonText = "‚úñÔ∏è"; // –ê–±–æ —ñ–Ω—à–∏–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –º–∏–Ω—É–ª–∏—Ö –¥–∞—Ç
          callbackData = "ignore";
        } else {
          // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å/–±–ª–æ–∫—É–≤–∞–Ω–Ω—è (–∑ _schedule)
          if (
            schedule[dateString] &&
            Object.keys(schedule[dateString]).length > 0
          ) {
            const hasBookedSlots = Object.values(schedule[dateString]).some(
              (slot) => slot.status === "booked"
            );
            const hasBlockedSlots = Object.values(schedule[dateString]).some(
              (slot) => slot.status === "blocked_admin"
            );

            if (hasBookedSlots || hasBlockedSlots) {
              // –Ø–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–Ω—è—Ç–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —Å–ª–æ—Ç, —Ç–æ –¥–∞—Ç–∞ –ø–æ–∑–Ω–∞—á–∞—î—Ç—å—Å—è
              buttonText += " üö´"; // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –µ–º–æ–¥–∂—ñ –¥–ª—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö/–∑–∞–π–Ω—è—Ç–∏—Ö –¥–∞—Ç
              // Callback –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –∞–ª–µ –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏, —â–æ –º–æ–∂–µ –±—É—Ç–∏ —á–∞—Å—Ç–∫–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
              // –ê–±–æ, —è–∫—â–æ –≤—Å—ñ —Å–ª–æ—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ/–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ, –∑—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é
              // –ù–∞—Ä–∞–∑—ñ –ø—Ä–æ—Å—Ç–æ –º–∞—Ä–∫—É—î–º–æ, –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ–¥–∏–Ω –±—É–¥–µ –ø—ñ–∑–Ω—ñ—à–µ
            }
          }
        }

        week.push(Markup.button.callback(buttonText, callbackData));
        day++;
      } else {
        // –ü—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–Ω—è –º—ñ—Å—è—Ü—è
        week.push(Markup.button.callback(" ", "ignore"));
      }
    }
    calendar.push(week);
    if (day > numDaysInMonth) break; // –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –≤—Å—ñ –¥–Ω—ñ –º—ñ—Å—è—Ü—è –¥–æ–¥–∞–Ω—ñ
  }

  // –†—è–¥–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –º—ñ—Å—è—Ü—è–º–∏
  const navRow = [
    Markup.button.callback(
      getTranslation("button_prev_month", lang),
      `cal_prev_${year}_${month}`
    ),
    Markup.button.callback(`${monthNames[month]} ${year}`, "ignore"), // –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —ñ —Ä—ñ–∫ (–Ω–µ–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–π)
    Markup.button.callback(
      getTranslation("button_next_month", lang),
      `cal_next_${year}_${month}`
    ),
  ];
  calendar.unshift(navRow); // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫

  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –ø–æ—Å–ª—É–≥"
  calendar.push([
    Markup.button.callback(
      getTranslation("button_back_to_services", lang),
      "back_to_services_from_calendar"
    ),
  ]);

  return Markup.inlineKeyboard(calendar);
};

module.exports = {
  getCalendarInlineKeyboard,
};
