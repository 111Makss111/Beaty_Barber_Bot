const { Markup } = require("telegraf");
const { getTranslation } = require("../data/translations");
const { getSchedule } = require("../data/data");

// –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ (–≥–æ–¥–∏–Ω–∏ –ø–æ—á–∞—Ç–∫—É –ø–æ—Å–ª—É–≥–∏)
// –£ —Ñ–æ—Ä–º–∞—Ç—ñ "–ì–ì:–•–•"
const AVAILABLE_TIMES = [
  "09:00",
  "10:30",
  "12:00",
  "13:30",
  "15:00",
  "16:30",
  "18:00",
];

/**
 * –ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —á–∞—Å–æ–≤–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏.
 * @param {string} dateString - –û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–†–†–†–†-–ú–ú-–î–î".
 * @param {string} lang - –ú–æ–≤–Ω–∏–π –∫–æ–¥ ('ua' –∞–±–æ 'pl').
 * @returns {Object} Telegraf InlineKeyboardMarkup.
 */
const getTimeSlotsInlineKeyboard = (dateString, lang) => {
  const timeSlotsKeyboard = [];
  const schedule = getSchedule();
  const daySchedule = schedule[dateString] || {}; // –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å

  const now = new Date();
  const todayDateString = `${now.getFullYear()}-${(now.getMonth() + 1)
    .toString()
    .padStart(2, "0")}-${now.getDate().toString().padStart(2, "0")}`;
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();

  let row = [];
  AVAILABLE_TIMES.forEach((time) => {
    const [hourStr, minuteStr] = time.split(":");
    const slotHour = parseInt(hourStr, 10);
    const slotMinute = parseInt(minuteStr, 10);

    let buttonText = time;
    let callbackData = `time_${time}`;
    let isDisabled = false;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–ª–æ—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π –∞–±–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if (
      daySchedule[time] &&
      (daySchedule[time].status === "booked" ||
        daySchedule[time].status === "blocked_admin")
    ) {
      isDisabled = true;
      buttonText += " üö´"; // –ú–∞—Ä–∫—É—î–º–æ –∑–∞–π–Ω—è—Ç—ñ/–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ —Å–ª–æ—Ç–∏
      callbackData = "ignore_slot"; // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∏–Ω—É–ª–∏–π —á–∞—Å, —è–∫—â–æ —Ü–µ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞
    if (dateString === todayDateString) {
      if (
        slotHour < currentHour ||
        (slotHour === currentHour && slotMinute <= currentMinute)
      ) {
        isDisabled = true;
        buttonText = "‚úñÔ∏è"; // –ú–∞—Ä–∫—É—î–º–æ –º–∏–Ω—É–ª–∏–π —á–∞—Å
        callbackData = "ignore_slot";
      }
    }

    row.push(Markup.button.callback(buttonText, callbackData));

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    if (row.length === 3) {
      timeSlotsKeyboard.push(row);
      row = [];
    }
  });

  // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–µ–ø–æ–≤–Ω–∏–π —Ä—è–¥, —è–∫—â–æ –≤—ñ–Ω —î
  if (row.length > 0) {
    timeSlotsKeyboard.push(row);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
  timeSlotsKeyboard.push([
    Markup.button.callback(
      getTranslation("button_back_to_calendar", lang),
      "back_to_calendar_from_time"
    ),
  ]);

  return Markup.inlineKeyboard(timeSlotsKeyboard);
};

module.exports = {
  getTimeSlotsInlineKeyboard,
  AVAILABLE_TIMES, // –ú–æ–∂–ª–∏–≤–æ, –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
};
